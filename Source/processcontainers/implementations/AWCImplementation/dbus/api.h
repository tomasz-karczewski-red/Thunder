/*
 * Generated by gdbus-codegen 2.48.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __API_H__
#define __API_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.lgi.rdk.utils.container.ctrl */

#define TYPE_CONTAINER_CTRL (container_ctrl_get_type ())
#define CONTAINER_CTRL(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_CONTAINER_CTRL, ContainerCtrl))
#define IS_CONTAINER_CTRL(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_CONTAINER_CTRL))
#define CONTAINER_CTRL_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_CONTAINER_CTRL, ContainerCtrlIface))

struct _ContainerCtrl;
typedef struct _ContainerCtrl ContainerCtrl;
typedef struct _ContainerCtrlIface ContainerCtrlIface;

struct _ContainerCtrlIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_start) (
    ContainerCtrl *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_id,
    const gchar *arg_cmd,
    const gchar *arg_param);

  gboolean (*handle_stop) (
    ContainerCtrl *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_id);

  void (*state_change) (
    ContainerCtrl *object,
    const gchar *arg_id,
    gint arg_pid,
    gint arg_state);

};

GType container_ctrl_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *container_ctrl_interface_info (void);
guint container_ctrl_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void container_ctrl_complete_start (
    ContainerCtrl *object,
    GDBusMethodInvocation *invocation);

void container_ctrl_complete_stop (
    ContainerCtrl *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void container_ctrl_emit_state_change (
    ContainerCtrl *object,
    const gchar *arg_id,
    gint arg_pid,
    gint arg_state);



/* D-Bus method calls: */
void container_ctrl_call_start (
    ContainerCtrl *proxy,
    const gchar *arg_id,
    const gchar *arg_cmd,
    const gchar *arg_param,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean container_ctrl_call_start_finish (
    ContainerCtrl *proxy,
    GAsyncResult *res,
    GError **error);

gboolean container_ctrl_call_start_sync (
    ContainerCtrl *proxy,
    const gchar *arg_id,
    const gchar *arg_cmd,
    const gchar *arg_param,
    GCancellable *cancellable,
    GError **error);

void container_ctrl_call_stop (
    ContainerCtrl *proxy,
    const gchar *arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean container_ctrl_call_stop_finish (
    ContainerCtrl *proxy,
    GAsyncResult *res,
    GError **error);

gboolean container_ctrl_call_stop_sync (
    ContainerCtrl *proxy,
    const gchar *arg_id,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_CONTAINER_CTRL_PROXY (container_ctrl_proxy_get_type ())
#define CONTAINER_CTRL_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_CONTAINER_CTRL_PROXY, ContainerCtrlProxy))
#define CONTAINER_CTRL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_CONTAINER_CTRL_PROXY, ContainerCtrlProxyClass))
#define CONTAINER_CTRL_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_CONTAINER_CTRL_PROXY, ContainerCtrlProxyClass))
#define IS_CONTAINER_CTRL_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_CONTAINER_CTRL_PROXY))
#define IS_CONTAINER_CTRL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_CONTAINER_CTRL_PROXY))

typedef struct _ContainerCtrlProxy ContainerCtrlProxy;
typedef struct _ContainerCtrlProxyClass ContainerCtrlProxyClass;
typedef struct _ContainerCtrlProxyPrivate ContainerCtrlProxyPrivate;

struct _ContainerCtrlProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  ContainerCtrlProxyPrivate *priv;
};

struct _ContainerCtrlProxyClass
{
  GDBusProxyClass parent_class;
};

GType container_ctrl_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ContainerCtrlProxy, g_object_unref)
#endif

void container_ctrl_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ContainerCtrl *container_ctrl_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
ContainerCtrl *container_ctrl_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void container_ctrl_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ContainerCtrl *container_ctrl_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
ContainerCtrl *container_ctrl_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_CONTAINER_CTRL_SKELETON (container_ctrl_skeleton_get_type ())
#define CONTAINER_CTRL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_CONTAINER_CTRL_SKELETON, ContainerCtrlSkeleton))
#define CONTAINER_CTRL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_CONTAINER_CTRL_SKELETON, ContainerCtrlSkeletonClass))
#define CONTAINER_CTRL_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_CONTAINER_CTRL_SKELETON, ContainerCtrlSkeletonClass))
#define IS_CONTAINER_CTRL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_CONTAINER_CTRL_SKELETON))
#define IS_CONTAINER_CTRL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_CONTAINER_CTRL_SKELETON))

typedef struct _ContainerCtrlSkeleton ContainerCtrlSkeleton;
typedef struct _ContainerCtrlSkeletonClass ContainerCtrlSkeletonClass;
typedef struct _ContainerCtrlSkeletonPrivate ContainerCtrlSkeletonPrivate;

struct _ContainerCtrlSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  ContainerCtrlSkeletonPrivate *priv;
};

struct _ContainerCtrlSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType container_ctrl_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ContainerCtrlSkeleton, g_object_unref)
#endif

ContainerCtrl *container_ctrl_skeleton_new (void);


G_END_DECLS

#endif /* __API_H__ */
